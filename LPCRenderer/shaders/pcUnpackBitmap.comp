#version 450 core
#extension GL_ARB_shader_atomic_counter_ops : require

struct DrawCommand
{
	uint count;
	uint instanceCount;
	uint first;
	uint baseInstance;
};

layout(std430, binding = 0) restrict readonly buffer Bitmaps
{
	uint bitmaps[];
};

layout(std430, binding = 1) restrict readonly buffer BitmapIndices
{
	uint bitmapIndices[];
};

layout(std430, binding = 2) restrict writeonly buffer coherent PackedPositions
{
	uint packedPositions[];
};

layout(std430, binding = 3) restrict writeonly buffer DrawBuffer
{
	DrawCommand drawCommands[];
};

layout(binding = 0) uniform atomic_uint currentPositionsCount;

uniform uint bitmapsOffset;

const uint bitmapSize = 32;

layout (local_size_x = 1, local_size_y = 1, local_size_z = bitmapSize) in;

const uint bitmapRowSize = bitmapSize / 32;//uints per row

const uint bitmapIndex = gl_WorkGroupID.x + bitmapsOffset;
const uint brickReadStart = bitmapIndex * bitmapSize * bitmapSize * bitmapRowSize;
shared uint brickWriteOffset;
shared uint brickWriteStart;
const uvec3 localBitCount = bitmapSize / gl_WorkGroupSize;
void main()
{
	if(gl_LocalInvocationIndex == 0)
	{	
		uint brickPositionsCount = 0;
		//we need to find the positions count of the current work group
		for(uint z = 0; z < bitmapSize; z++)
		{
			for(uint y = 0; y < bitmapSize; y++)
			{
				for(uint x = 0; x < bitmapRowSize; x++)
				{
					uint idx = brickReadStart + z * bitmapSize * bitmapRowSize + y * bitmapRowSize + x;
					brickPositionsCount += bitCount(bitmaps[idx]);
				}
			}
		}

		//fill the draw command for the current bitmap and 
		//reserve space for the work group in the positions buffer
		drawCommands[gl_WorkGroupID.x].count = brickPositionsCount;
		drawCommands[gl_WorkGroupID.x].instanceCount = 1;
		drawCommands[gl_WorkGroupID.x].first = atomicCounterAddARB(currentPositionsCount, brickPositionsCount);
		drawCommands[gl_WorkGroupID.x].baseInstance = bitmapIndices[bitmapIndex];
		atomicExchange(brickWriteStart, drawCommands[gl_WorkGroupID.x].first);
		atomicExchange(brickWriteOffset, 0);
	}

	memoryBarrierShared();
	groupMemoryBarrier();
	barrier();

	//push points to appropriate place in buffer
	for(uint z = gl_LocalInvocationID.z * localBitCount.z; z < (gl_LocalInvocationID.z + 1) * localBitCount.z; z++)
	{
		for(uint y = gl_LocalInvocationID.y * localBitCount.y; y < (gl_LocalInvocationID.y + 1) * localBitCount.y; y++)
		{
			for(uint x = gl_LocalInvocationID.x * (localBitCount.x / 32); x < (gl_LocalInvocationID.x + 1) * (localBitCount.x / 32); x++)
			{
				uint idx = brickReadStart + z * bitmapSize * bitmapRowSize + y * bitmapRowSize + x;
				for(uint bit = 0; bit < 32; bit++)
				{
					if((bitmaps[idx] & (1 << bit)) != 0)
					{
						vec3 position = vec3(x * 32 + bit, y, z) / bitmapSize;
						uint offset = atomicAdd(brickWriteOffset, 1) + brickWriteStart;

						memoryBarrierShared();
						groupMemoryBarrier();

						uint packedPosition = uint(bitmapSize * position.x);
						packedPosition |= uint(bitmapSize * position.y) << 5;
						packedPosition |= uint(bitmapSize * position.z) << 10;

						atomicOr(packedPositions[offset/2], packedPosition << ((offset%2 == 0) ? 16 : 0));
						memoryBarrierBuffer();
						groupMemoryBarrier();

					}
				}
			}
		}
	}
}